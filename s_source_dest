
args=(commandArgs(TRUE))
source<-array(0,1)
dest<-1:4
for(q in 1:length(args)) source[q]<-as.numeric(args[[q]])
print(source)
dest<-dest[-source]
print(dest)


sl<-length(source)
dl<-length(dest)
dn<-sn<-""
for(q in 1:sl) sn<-paste(sn,source[q],sep="")
for(q in 1:dl) dn<-paste(dn,dest[q],sep="")

numero<-"a"
	sex<-read.csv(paste(sep="_",numero,"sex.csv")) ######### row number = population number
	inds<-read.csv(paste(sep="_",numero,"abars.csv"))
	sex[is.na(sex)]<-5
	pops<-read.csv(paste(sep="_",numero,"pops.csv"))
	wea<-read.csv(paste(sep="_",numero,"wea.csv"))

	### iota = integer, number of populations // sampling events | input
	iota<-max(pops[,2],na.rm=1) # get the number of populations
	### nu = one dimension array of integers of length iota, number of tagged individuals per population | input
	kappa<-nu<-rep(0,iota) # initialise empty array of number of tagged individuals and observations
	for(q in 1:iota) nu[q]<-sum(pops[which(pops[,2]==q),4])
	## kappa = one dimension array of integers of length iota, number of sampling events per population | input
	for(q in 1:iota) kappa[q] <- max(inds[which(inds[,2]==q),1])
	### eta = three dimensions array {iota x nu[i] x kappa[i]}, number of vocalisations per sampling event per individual per population | input
	eta<-array(-20,c(length(source),max(nu),max(kappa[source]))) #initialise empty structure
	for(i in 1:length(source))
		for(n in 1:nu[i])
			for(k in 1:kappa[i])
				eta[i,n,k]<-inds[which((inds[,1]==k)&(inds[,2]==i)),(n+2)]
	### omicron = real number of vocalisations per population, per sex per sampling event | input

	chi<-omicron<-array(-20,c(iota,2,max(kappa))) #initialise empty structure for tagged individuals' vocalisations (chi) and population ones (omicron)
	for(i in 1:iota)
		for(s in 1:2)
			for(k in 1:kappa[i])
				omicron[i,s,k]<-pops[which((pops[,2]==i)&(pops[,3]==s)),(k+4)]
	qp<-c(1,2,1,3)
	lot<-matrix(nrow=iota,ncol=max(kappa),data=0)
	hit<-matrix(nrow=iota,ncol=max(kappa),data=0)
	ws<-matrix(nrow=iota,ncol=max(kappa),data=0)
	rh<-matrix(nrow=iota,ncol=max(kappa),data=0)
	ap<-matrix(nrow=iota,ncol=max(kappa),data=0)
	ml<-matrix(nrow=iota,ncol=max(kappa),data=0)
	toy<-rep(0,iota)
	we<-matrix(nrow=length(rownames(wea)),ncol=length(colnames(wea)),data=0)
	for(q in 3:8) for(w in 1:length(wea[,2])) we[w,q]<-(wea[w,q]-mean(wea[,q]))/sd(wea[,q])

	for(i in 1:iota)
		{
		tm<-we[which(wea[,1]==i),3:8]
		toy[i]<-unique(wea[which(wea[,1]==i),9])[1]
		for(k in 1:kappa[i])
			{
			lot[i,k]<-tm[k,1]
			hit[i,k]<-tm[k,2]
			ws[i,k]<-tm[k,3]
			rh[i,k]<-tm[k,4]
			ap[i,k]<-tm[k,5]
			ml[i,k]<-tm[k,6]
			}
		}
	iota<-length(source)
	delta<-length(dest)
	###### initialise data frames for recruited individuals
	omega<-100 #umber of augmented individuals
	theta_initza<-array(NA,c((delta+iota),omega,max(kappa),2)) #initialise empty structure for number of individual vocalisations of recruited individuals


	psi<-array(0,c((delta+iota),2)) #initialise empty structure for number of tagged individuals per population per sex
		for(i in 1:iota)
		for(s in 1:2)
			psi[i,s]<-pops[which((pops[,2]==i)&(pops[,3]==s)),4] #### number of tagged individuals in population i of sex s
	psi[dest,]<-0
	iota<-length(source)
	delta<-length(dest)
	
	for(i in 1:iota)
		for(s in 1:2)
		{
			psi[i,s]<-pops[which((pops[,2]==i)&(pops[,3]==s)),4] #### number of tagged individuals in population i of sex s
			for(k in 1:kappa[i])
				{
				chi[i,s,k]<-sum(eta[i,which(sex[i,]==s),k])
				theta_initza[i,,k,s]<-  rep(0,omega)#ifelse((omicron[i,s,k]==0),rep(0,omega),rmultinom(1,(omicron[i,s,k]-chi[i,s,k]),rep(1/omega,omega)))
				}
		}
		
	for(i in (iota+1):(iota+delta))
		for(s in 1:2)
			for(k in 1:kappa[i])
				theta_initza[i,,k,s]<-  rep(0,omega)

	xi_initza<-array(1,c((delta+iota),2,omega)) #initialise array of recruitment flag
	

	initza<-function(){list(xi=xi_initza,theta=theta_initza)}
	

	########################################### check how to integrate vocs outside the area
	require(rjags)
	require(shinystan)

	lista<-list(iota=iota,delta=delta,nu=nu,qp=qp,eta=eta,omicron=omicron,omega=omega,kappa=kappa,psi=psi,sex=sex,toy=toy,lot=lot,hit=hit,ws=ws,rh=rh,ap=ap,ml=ml)
	
	print(Sys.time())
	a<-jags.model(n.chains=3,file='m_source_dest',data=lista,inits=initza)
	print("finished declaring model at")
	print(Sys.time())
	update(a,35e4)
	print("finished burn-in at")
	print(Sys.time())
	save<-c("zeta","beta_sex","beta_weather","beta_occ","alpha") 
	ra<-coda.samples(variable.names=save,n.iter=7e5,thin=35,model=a)
	print("finished sampling at")
	print(Sys.time())

	save(ra,file=paste(sep="_",sn,"to",dn,"ra.erre"),version=2)
	print(Sys.time())
